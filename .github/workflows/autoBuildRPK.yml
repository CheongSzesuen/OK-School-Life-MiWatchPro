name: Build Signed RPK
on:
  push:
    tags:
      - 'v*'  # 仅当推送标签时触发（如v1.0.0）

jobs:
  build-rpk:
    runs-on: ubuntu-latest
    env:
      TEMP_PROJECT_PATH: ${{ github.workspace }}/.temp_OKSchoolLife

    steps:
      # 1. 代码检出
      - uses: actions/checkout@v4

      # 2. 恢复签名文件（修复PEM格式问题）[1,3](@ref)
      - name: Restore Signing Files
        run: |
          mkdir -p .temp_OKSchoolLife/sign/
          # 使用EOF保留完整PEM格式（含BEGIN/END标记行）
          cat << 'EOF' > .temp_OKSchoolLife/sign/private.pem
          ${{ secrets.PRIVATE_PEM }}
          EOF
          cat << 'EOF' > .temp_OKSchoolLife/sign/certificate.pem
          ${{ secrets.CERTIFICATE_PEM }}
          EOF
          chmod 600 .temp_OKSchoolLife/sign/*.pem  # 严格权限限制[3](@ref)

      # 3. 调试步骤（验证文件内容）
      - name: Debug PEM Files
        if: ${{ always() }}
        run: |
          ls -la .temp_OKSchoolLife/sign/
          echo "Private Key Head:"
          head -n 3 .temp_OKSchoolLife/sign/private.pem
          echo "Certificate Head:"
          head -n 3 .temp_OKSchoolLife/sign/certificate.pem

      # 4. 验证密钥有效性（修复OpenSSL读取失败问题）[3](@ref)
      - name: Verify PEM Files
        run: |
          # 检查私钥数学参数
          openssl rsa -in .temp_OKSchoolLife/sign/private.pem -noout -check || (echo "Private key validation failed"; exit 1)
          # 验证证书链
          openssl x509 -in .temp_OKSchoolLife/sign/certificate.pem -noout -text

      # 5. 构建RPK文件
      - name: Build RPK
        run: |
          ./node_modules/.bin/aiot build --sign
          mv dist/*.rpk ./OK_School_Life-MiBand9Pro-${{ github.ref_name }}.rpk

      # 6. 上传产物（替换弃用的v3版本）[1,4](@ref)
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-rpk
          path: ./OK_School_Life-MiBand9Pro-*.rpk
          overwrite: true  # v4需显式声明覆盖[1](@ref)
          retention-days: 7  # 设置自动清理时间