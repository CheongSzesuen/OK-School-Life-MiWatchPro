name: Build Signed RPK
on:
  push:
    tags:
      - 'v*'

jobs:
  build-rpk:
    runs-on: ubuntu-latest
    env:
      TEMP_SIGN_DIR: ${{ github.workspace }}/.temp_sign

    steps:
      # 1. 代码检出
      - uses: actions/checkout@v4

      # 2. 安全写入密钥文件（增强格式检查）
      - name: Setup Signing Files
        run: |
          mkdir -p $TEMP_SIGN_DIR
          # 严格验证Secrets是否存在
          if [ -z "${{ secrets.PRIVATE_PEM }}" ]; then
            echo "::error::PRIVATE_PEM未设置！检查GitHub仓库Secrets配置"
            exit 1
          fi
          # 写入私钥并验证格式
          echo "${{ secrets.PRIVATE_PEM }}" > $TEMP_SIGN_DIR/private.pem
          if ! grep -q "BEGIN PRIVATE KEY" $TEMP_SIGN_DIR/private.pem; then
            echo "::error::私钥缺少PEM标记，请检查Secrets内容格式"
            exit 1
          fi
          # 写入证书
          echo "${{ secrets.CERTIFICATE_PEM }}" > $TEMP_SIGN_DIR/certificate.pem
          # 强制设置权限
          chmod 700 $TEMP_SIGN_DIR
          chmod 600 $TEMP_SIGN_DIR/*.pem

      # 3. 深度调试输出
      - name: Debug Key Files
        if: always()
        run: |
          echo "===== 私钥完整性验证 ====="
          head -n 3 $TEMP_SIGN_DIR/private.pem
          echo "... [内容已截断] ..."
          tail -n 3 $TEMP_SIGN_DIR/private.pem
          echo "文件大小: $(wc -c < $TEMP_SIGN_DIR/private.pem)字节"
          
          echo "\n===== OpenSSL验证 ====="
          openssl rsa -in $TEMP_SIGN_DIR/private.pem -noout -check 2>&1 || true
          openssl x509 -in $TEMP_SIGN_DIR/certificate.pem -noout -text 2>&1 | head -n 10

      # 4. 密钥对匹配验证
      - name: Validate Key Pair
        run: |
          # 检查私钥与证书是否匹配
          PRIVATE_MODULUS=$(openssl rsa -in $TEMP_SIGN_DIR/private.pem -noout -modulus | openssl sha256)
          CERT_MODULUS=$(openssl x509 -in $TEMP_SIGN_DIR/certificate.pem -noout -modulus | openssl sha256)
          if [ "$PRIVATE_MODULUS" != "$CERT_MODULUS" ]; then
            echo "::error::私钥与证书不匹配！请重新生成密钥对"
            exit 1
          fi
          echo "✅ 密钥对验证通过"

      # 5. 构建与上传
      - name: Build RPK
        run: |
          ./node_modules/.bin/aiot build --sign
          mv dist/*.rpk ./release-${{ github.ref_name }}.rpk

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-rpk
          path: ./release-*.rpk
          retention-days: 3