name: Build Signed RPK
on:
  push:
    tags:
      - 'v*'  # 仅当推送标签时触发（如v1.0.0）

jobs:
  build-rpk:
    runs-on: ubuntu-latest
    env:
      TEMP_PROJECT_PATH: ${{ github.workspace }}/.temp_OKSchoolLife

    steps:
      # 1. 代码检出（使用最新v4版本）
      - uses: actions/checkout@v4

      # 2. 恢复签名文件（修复PEM格式与权限问题）
      - name: Restore Signing Files
        run: |
          mkdir -p .temp_OKSchoolLife/sign/
          # 使用EOF保留完整PEM格式（含BEGIN/END标记行）
          cat << 'EOF' > .temp_OKSchoolLife/sign/private.pem
          ${{ secrets.PRIVATE_PEM }}
          EOF
          cat << 'EOF' > .temp_OKSchoolLife/sign/certificate.pem
          ${{ secrets.CERTIFICATE_PEM }}
          EOF
          # 严格权限限制（OpenSSL要求）
          chmod 700 .temp_OKSchoolLife/sign/
          chmod 600 .temp_OKSchoolLife/sign/*.pem

      # 3. 调试步骤（验证文件内容与权限）
      - name: Debug PEM Files
        if: ${{ always() }}  # 即使后续步骤失败也执行
        run: |
          echo "----- File Content Headers -----"
          head -n 3 .temp_OKSchoolLife/sign/*.pem
          echo "\n----- File Permissions -----"
          ls -la .temp_OKSchoolLife/sign/
          echo "\n----- OpenSSL Version -----"
          openssl version

      # 4. 验证密钥有效性（修复OpenSSL读取失败问题）
      - name: Validate PEM Files
        run: |
          # 检查私钥数学参数
          openssl rsa -in .temp_OKSchoolLife/sign/private.pem -noout -check || (echo "❌ Private key validation failed"; exit 1)
          # 验证证书链
          openssl x509 -in .temp_OKSchoolLife/sign/certificate.pem -noout -text || (echo "❌ Certificate validation failed"; exit 1)

      # 5. 构建RPK文件
      - name: Build RPK
        run: |
          ./node_modules/.bin/aiot build --sign
          mv dist/*.rpk ./OK_School_Life-MiBand9Pro-${{ github.ref_name }}.rpk

      # 6. 上传产物（使用v4版本并设置保留时间）
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-rpk
          path: ./OK_School_Life-MiBand9Pro-*.rpk
          overwrite: true
          retention-days: 3  # 自动清理旧产物[2](@ref)