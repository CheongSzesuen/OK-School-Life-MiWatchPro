name: Build Signed RPK on Tag Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-rpk:
    runs-on: ubuntu-latest
    env:
      TEMP_SIGN_DIR: ${{ github.workspace }}/.temp_sign
      BUILD_OUTPUT: OK_School_Life-MiBand9Pro-${{ github.ref_name }}.rpk

    steps:
      # 1. 代码检出（保留完整git历史）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置Node.js环境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'

      # 3. 安装依赖并验证aiot工具链
      - name: Install dependencies
        run: |
          npm install
          if [ ! -f "node_modules/.bin/aiot" ]; then
            echo "::error::aiot-toolkit not found in node_modules/.bin/"
            exit 1
          fi

      # 4. 安全写入密钥文件
      - name: Setup Signing Files
        run: |
          mkdir -p $TEMP_SIGN_DIR
          if [ -z "${{ secrets.PRIVATE_PEM }}" ] || [ -z "${{ secrets.CERTIFICATE_PEM }}" ]; then
            echo "::error::Missing PRIVATE_PEM or CERTIFICATE_PEM in secrets"
            exit 1
          fi
          echo "${{ secrets.PRIVATE_PEM }}" > $TEMP_SIGN_DIR/private.pem
          echo "${{ secrets.CERTIFICATE_PEM }}" > $TEMP_SIGN_DIR/certificate.pem
          if ! grep -q "BEGIN PRIVATE KEY" $TEMP_SIGN_DIR/private.pem || \
             ! grep -q "BEGIN CERTIFICATE" $TEMP_SIGN_DIR/certificate.pem; then
            echo "::error::Invalid PEM format"
            exit 1
          fi
          chmod 700 $TEMP_SIGN_DIR
          chmod 600 $TEMP_SIGN_DIR/*.pem

      # 5. 密钥对验证（非阻塞式）
      - name: Validate Key Pair
        continue-on-error: true
        run: |
          openssl rsa -in $TEMP_SIGN_DIR/private.pem -noout -check
          if [ "$(openssl rsa -in $TEMP_SIGN_DIR/private.pem -noout -modulus | openssl sha256)" != \
               "$(openssl x509 -in $TEMP_SIGN_DIR/certificate.pem -noout -modulus | openssl sha256)" ]; then
            echo "::warning::Key pair mismatch (proceeding with unsigned build)"
          fi

      # 6. 构建RPK（根据密钥状态决定是否签名）
      - name: Build RPK
        run: |
          # 创建临时配置文件
          cat > aiot.config.js <<EOF
          module.exports = {
            sign: {
              cert: '$TEMP_SIGN_DIR/certificate.pem',
              privateKey: '$TEMP_SIGN_DIR/private.pem'
            }
          }
          EOF
          
          # 执行构建
          if grep -q "BEGIN PRIVATE KEY" $TEMP_SIGN_DIR/private.pem; then
            echo "::info::Building signed RPK package"
            ./node_modules/.bin/aiot build
          else
            echo "::warning::Building unsigned RPK due to invalid signing key"
            ./node_modules/.bin/aiot build
          fi
          
          # 检查构建产物是否存在
          if ! ls dist/*.rpk 1> /dev/null 2>&1; then
            echo "::error::No RPK file generated in dist directory"
            exit 1
          fi
          
          # 重命名输出文件
          mv dist/*.rpk $BUILD_OUTPUT

      # 7. 精确匹配的更新日志生成
      - name: Generate precise changelog
        id: changelog
        run: |
          # 获取上一个release的tag
          PREV_RELEASE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | \
            jq -r '.tag_name // empty')
          
          # 生成精确格式的日志
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "## 📝 更新日志 ${PREV_RELEASE:-初始版本} → ${{ github.ref_name }}" >> $GITHUB_ENV
          
          git log --pretty=format:"- **%s**%n  贡献者：%an <%ae>%n  提交时间：%ad%n  %b" \
            --date=format:"%Y-%m-%d %H:%M:%S" \
            ${PREV_RELEASE:+$PREV_RELEASE..}${{ github.ref_name }} | \
            sed '/^  $/d' | \
            sed 's/^  $$BUG$$/[BUG]/' >> $GITHUB_ENV
          
          echo "EOF" >> $GITHUB_ENV

      # 8. 获取构建元数据
      - name: Gather metadata
        id: meta
        run: |
          # 构建时间（UTC+8）
          echo "time=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          
          # 签名状态
          if grep -q "BEGIN PRIVATE KEY" $TEMP_SIGN_DIR/private.pem; then
            echo "sign_status=已签名 (Signed)" >> $GITHUB_OUTPUT
          else
            echo "sign_status=未签名 (Unsigned)" >> $GITHUB_OUTPUT
          fi
          
          # 获取commit短ID
          echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT

      # 9. 创建格式化的GitHub Release
      - name: Create Formatted Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: 🎉 Release ${{ github.ref_name }}
          body: |
            ## 📝 更新日志
            ${{ env.CHANGELOG }}

            ## 🛠️ 构建信息
            - 🕒 构建时间: ${{ steps.meta.outputs.time }} (UTC+8)
            - 🏷️ 标签: ${{ github.ref_name }}
            - 🔗 提交: [${{ steps.meta.outputs.short_sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - 🔐 签名状态: ${{ steps.meta.outputs.sign_status }}
            - 📦 构建产物: ${{ env.BUILD_OUTPUT }}
          files: ${{ env.BUILD_OUTPUT }}
          draft: false
          prerelease: false