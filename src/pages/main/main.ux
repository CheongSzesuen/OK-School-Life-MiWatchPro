<template>
  <div class="container">
    <div class="spacer"></div>
    <div class="main-area">
      <text class="question" if="{{currentQuestion}}">{{ currentQuestion }}</text>
      <div class="buttons" if="{{showOptions}}">
        <block for="{{options}}">
          <div class="btn {{btnPressedIdx === $idx ? 'btn-pressed' : ''}}" onTouchStart="onBtnTouchStart($idx)"
            onTouchEnd="onBtnTouchEnd" onClick="onOptionClick($item.key)">
            <text class="btn-text">{{ $item.text }}</text>
          </div>
        </block>
        <text if="!options || options.length === 0" class="error-hint">暂无有效选项</text>
      </div>
      <div class="result-area" if="{{showResult}}">
        <text class="result">{{ resultText }}</text>
        <text class="achievement" if="{{achievementText}}">{{ achievementText }}</text>
        <div class="btn {{btnPressedIdx === -2 ? 'btn-pressed' : ''}}" onTouchStart="onBtnTouchStart(-2)"
          onTouchEnd="onBtnTouchEnd" onClick="onContinue">
          <text class="btn-text">继续</text>
        </div>
      </div>
    </div>
    <div class="footer-area">
      <text class="footer-copyright">© 2024 WaiJade & StillAlive</text>
    </div>
  </div>
</template>

<script>
import router from "@system.router"
import storage from "@system.storage"
import eventsData from "../../common/data/events.json"
export default {
  private: {
    questionIdx: 0,
    currentQuestion: "",
    options: [],
    resultText: "",
    achievementText: "",
    showOptions: true,
    showResult: false,
    eventsData: {}, // 初始化为空对象
    groupKey: "",
    eventIdx: 0,
    usedRandomEvents: [],
    stage: "choose_school",
    currentEvent: null,
    currentRandomIdx: -1,
    btnPressedIdx: -1
  },

  onInit() {
    this.stage = "choose_school"
    this.usedRandomEvents = []
    this.eventIdx = 0

    // 直接使用导入的JSON数据
    this.eventsData = eventsData
    this.showChooseSchool()
  },
  showChooseSchool() {
    this.stage = "choose_school"
    this.currentQuestion = "请选择你的入学学校："
    this.options = [
      {key: "1", text: "羊县中学"},
      {key: "2", text: "闪西省汗忠中学"},
      {key: "3", text: "汗忠市龙港高级中学"}
    ]
    this.showOptions = true
    this.showResult = false
    this.resultText = ""
    this.achievementText = ""
    this.currentEvent = null
  },

  onOptionClick(key) {
    if (this.stage === "choose_school") {
      const groupMap = {1: "group_1", 2: "group_2", 3: "group_3"}
      this.groupKey = groupMap[key]
      this.eventIdx = 0
      this.stage = "school_fixed"
      this.showFixedEvent()
    } else if (this.stage === "school_fixed") {
      this.handleFixedChoice(key)
    } else if (this.stage === "random_event") {
      this.handleRandomChoice(key)
    }
  },

  showFixedEvent() {
    const group =
      this.eventsData.events && this.eventsData.events.fixed_events
        ? this.eventsData.events.fixed_events[this.groupKey] || []
        : []

    if (this.eventIdx < group.length) {
      const event = group[this.eventIdx]
      this.currentEvent = event
      this.currentQuestion = event.question
      this.options = Object.keys(event.choices).map((k) => ({
        key: k,
        text: event.choices[k]
      }))
      this.showOptions = true
      this.showResult = false
      this.resultText = ""
      this.achievementText = ""
    } else {
      this.stage = "random_event"
      this.showRandomEvent()
    }
  },

  handleFixedChoice(key) {
    const event = this.currentEvent
    this.resultText = event.results[key] || ""
    this.achievementText =
      event.achievements && event.achievements[key] ? "获得成就：" + event.achievements[key] : ""
    this.showOptions = false
    this.showResult = true
    if (event.end_game_choices && event.end_game_choices.includes(key)) {
      this.stage = "end"
    }
  },

  onContinue() {
    if (this.stage === "end") {
      router.replace({
        uri: "pages/welcome"
      })
    } else if (this.stage === "school_fixed") {
      this.eventIdx += 1
      this.showFixedEvent()
    } else if (this.stage === "random_event") {
      this.showRandomEvent()
    }
  },

  showRandomEvent() {
    const allRandom = (this.eventsData.events && this.eventsData.events.random_events) || []
    const available = allRandom.filter((e, idx) => this.usedRandomEvents.indexOf(idx) === -1)

    if (available.length === 0) {
      this.currentQuestion = ""
      this.resultText = "所有事件已完成！"
      this.achievementText = ""
      this.showOptions = false
      this.showResult = true
      this.stage = "end"
      return
    }

    const idx = Math.floor(Math.random() * available.length)
    const event = available[idx]
    this.currentRandomIdx = this.eventsData.events.random_events.indexOf(event)
    this.currentEvent = event
    this.currentQuestion = event.question
    this.options = Object.keys(event.choices).map((k) => ({
      key: k,
      text: event.choices[k]
    }))
    this.showOptions = true
    this.showResult = false
    this.resultText = ""
    this.achievementText = ""
  },

  handleRandomChoice(key) {
    const event = this.currentEvent
    let result = ""

    if (Array.isArray(event.results[key])) {
      let sum = 0
      const rand = Math.random()

      for (const item of event.results[key]) {
        sum += item.probability || item.prob || 0
        if (rand < sum) {
          result = item.text || item.rd_result || ""
          break
        }
      }

      if (!result) {
        result = event.results[key][0].text || event.results[key][0].rd_result || ""
      }
    } else {
      result = event.results[key] || ""
    }

    this.resultText = result
    this.achievementText =
      event.achievements && event.achievements[key] ? "获得成就：" + event.achievements[key] : ""
    this.showOptions = false
    this.showResult = true
    this.usedRandomEvents.push(this.currentRandomIdx)

    if (event.end_game_choices && event.end_game_choices.includes(key)) {
      this.stage = "end"
    }
  }
}
</script>

<style>
@import "main.css";
</style>